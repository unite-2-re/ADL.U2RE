const t=()=>{let t=screen.orientation.type;return window.matchMedia("((display-mode: fullscreen) or (display-mode: standalone) or (display-mode: window-controls-overlay))").matches||(matchMedia("(orientation: portrait)").matches?t=t.replace("landscape","portrait"):matchMedia("(orientation: landscape)").matches&&(t=t.replace("portrait","landscape"))),t},e=new WeakMap;class i extends HTMLCanvasElement{static observedAttributes=["data-src"];ctx=null;image=null;connectedCallback(){const t=this.parentNode;this.width=Math.min(Math.max(this.clientWidth||t?.clientWidth||0,1),Math.min(t?.clientWidth||0,screen?.width||0))*(devicePixelRatio||1),this.height=Math.min(Math.max(this.clientHeight||t?.clientHeight||0,1),Math.min(t?.clientHeight||0,screen?.height||0))*(devicePixelRatio||1),this.style.aspectRatio=`${this.clientWidth} / ${this.clientHeight}`,this.style.containIntrinsicInlineSize=this.width+"px",this.style.containIntrinsicBlockSize=this.height+"px"}constructor(){super();const t=this.parentNode;this.ctx=this.getContext("2d",{desynchronized:1,powerPreference:"high-performance"}),this.inert=1,this.style.objectFit="cover",this.style.objectPosition="center",this.classList.add("u-canvas"),new ResizeObserver((t=>{for(const e of t){const t=e.contentBoxSize[0];t&&(this.width=Math.max(t.inlineSize*devicePixelRatio,0),this.height=Math.max(t.blockSize*devicePixelRatio,0),this.style.aspectRatio=`${this.width} / ${this.height}`,this.style.containIntrinsicInlineSize=this.width+"px",this.style.containIntrinsicBlockSize=this.height+"px",this.#t())}})).observe(this,{box:"content-box"});const e=()=>{this.width=Math.max((this.clientWidth||t?.clientWidth||0)*devicePixelRatio,0),this.height=Math.max((this.clientHeight||t?.clientHeight||0)*devicePixelRatio,0),this.style.aspectRatio=`${this.width} / ${this.height}`,this.style.containIntrinsicInlineSize=this.width+"px",this.style.containIntrinsicBlockSize=this.height+"px",this.#t()};screen.orientation.addEventListener("change",e),matchMedia("(orientation: portrait)").addEventListener("change",e),window.addEventListener("resize",e),requestAnimationFrame(e),this.#e(this.dataset.src,0).then((()=>this.#t()))}#t(){const e=this,i=this.ctx,a=this.image;if(a&&i){const s=((t()||"").startsWith("portrait")?1:0)-0,h=a.height>a.width?1:0,n=Math.max(e[["width","height"][s]]/a[["width","height"][h]],e[["height","width"][s]]/a[["height","width"][h]]);i.save(),i.clearRect(0,0,e.width,e.height),((e,i,a=1,s)=>{const h=t(),n=e.canvas;switch(h){case"landscape-primary":e.translate(n.width/2,n.height/2),e.rotate(0),e.rotate(-90*s*(Math.PI/180)),e.translate(-i.width/2*a,-i.height/2*a);break;case"portrait-primary":e.translate(n.width/2,n.height/2),e.rotate(Math.PI/180*90),e.rotate(-90*s*(Math.PI/180)),e.translate(-i.width/2*a,-i.height/2*a);break;case"landscape-secondary":e.translate(n.width/2,n.height/2),e.rotate(Math.PI/180*180),e.rotate(-90*s*(Math.PI/180)),e.translate(-i.width/2*a,-i.height/2*a);break;case"portrait-secondary":e.translate(n.width/2,n.height/2),e.rotate(Math.PI/180*270),e.rotate(-90*s*(Math.PI/180)),e.translate(-i.width/2*a,-i.height/2*a)}})(i,a,n,h),i.drawImage(a,0,0,a.width*n,a.height*n),i.restore()}}async $useImageAsSource(t,i=1){const a=t instanceof ImageBitmap?t:await(t=>(!e.has(t)&&(t instanceof Blob||t instanceof File||t instanceof OffscreenCanvas||t instanceof ImageBitmap||t instanceof Image)&&e.set(t,createImageBitmap(t)),e.get(t)))(t).catch((t=>null));return(t instanceof Blob||t instanceof File)&&dispatchEvent(new CustomEvent("u-wallpaper",{detail:{blob:t,doNotRewrite:i}})),a&&(this.image=a,this.#t()),t}#e(t,e=1){return fetch(t)?.then?.((async t=>this.$useImageAsSource(t.blob(),e??1).catch((t=>null))))?.catch?.((()=>{}).bind())}attributeChangedCallback(t,e,i){"data-src"==t&&this.#e(i,0).then((()=>this.#t()))}}customElements.define("u-canvas",i,{extends:"canvas"});export{i as default,t as getCorrectOrientation};